import os
import re
from xml.etree import ElementTree as ET

def extract_x_y_from_transform(transform_value):
    match = re.search(r'matrix\(([^)]+)\)', transform_value)
    if match:
        values = match.group(1).split()
        if len(values) == 6:
            return float(values[4]), float(values[5])
    return None, None

def parse_path_d(d_value):
    coordinates = re.findall(r'[-+]?\d*\.\d+|\d+', d_value)
    return [float(coord) for coord in coordinates]

def find_nearest_text(x, y, text_elements):
    nearest_x = min((el for el in text_elements if el.text.isdigit()), 
                    key=lambda el: abs(extract_x_y_from_transform(el.get('transform'))[0] - x))
    nearest_y = min((el for el in text_elements if not el.text.isdigit()), 
                    key=lambda el: abs(extract_x_y_from_transform(el.get('transform'))[1] - y))
    return nearest_x.text, nearest_y.text

def update_svg(file_path):
    ET.register_namespace("", "http://www.w3.org/2000/svg")
    tree = ET.parse(file_path)
    root = tree.getroot()

    path_elements = root.findall(".//*{http://www.w3.org/2000/svg}path")
    text_elements = root.findall(".//*{http://www.w3.org/2000/svg}text")

    for path in path_elements:
        if path.get('stroke') == '#000000':
            d = path.get('d')
            coords = parse_path_d(d)
            if len(coords) == 4:
                width = abs(coords[2] - coords[0])
                height = abs(coords[3] - coords[1])
                if width > 8 and height > 10:
                    x, y = coords[0], coords[1]
                    x_loc, y_loc = find_nearest_text(x, y, text_elements)
                    location_id = f"{y_loc}.{x_loc}"
                    
                    path.set('id', location_id)
                    path.set('fill', 'rgba(0, 255, 0, 0.3)')  # Półprzezroczysty zielony
                    path.set('stroke', '#FF0000')  # Czerwona ramka
                    path.set('stroke-width', '1')

                    # Dodaj tekst z lokalizacją
                    text_element = ET.SubElement(root, 'text')
                    text_element.set('x', str(x + width/2))
                    text_element.set('y', str(y + height/2))
                    text_element.set('text-anchor', 'middle')
                    text_element.set('dominant-baseline', 'middle')
                    text_element.set('font-size', '4')
                    text_element.set('fill', '#000000')
                    text_element.text = location_id

    tree.write(file_path, encoding='utf-8', xml_declaration=True)

def main():
    svg_directory = '.'

    for filename in os.listdir(svg_directory):
        if filename.endswith('.svg'):
            file_path = os.path.join(svg_directory, filename)
            update_svg(file_path)
            print(f"Zaktualizowano plik: {filename}")

if __name__ == "__main__":
    main()
