except Exception as e:
        logger.error(f"Błąd podczas przetwarzania danych: {str(e)}")
        return False#!/usr/bin/env python3.12
"""
Skrypt do wykonywania zapytań GraphQL i zapisywania wyników do CSV.
Zapytanie dotyczy serwerów z applicationXGenericHardwar z filtrem na applicationId (175442).
"""

import csv
import json
import logging
import os
import sys
import time
import socket
import subprocess
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple

import requests
from requests.exceptions import RequestException

# Konfiguracja loggera
def setup_logger() -> logging.Logger:
    """Konfiguracja systemu logowania."""
    logger = logging.getLogger("graphql_export")
    logger.setLevel(logging.INFO)
    
    # Handler dla logów w konsoli
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_format)
    
    # Handler dla logów w pliku
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    file_handler = logging.FileHandler(f"{log_dir}/graphql_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    file_handler.setLevel(logging.DEBUG)
    file_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(file_format)
    
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)
    
    return logger

# Funkcja do wykonywania pingu i zwracania adresu IP
def get_server_ip(server_name: str, logger: logging.Logger) -> str:
    """
    Wykonuje ping dla podanego serwera i zwraca jego adres IP.
    
    Args:
        server_name: Nazwa serwera do pingowania
        logger: Obiekt loggera
        
    Returns:
        Adres IP serwera lub pusty string w przypadku błędu
    """
    if not server_name:
        return ""
        
    try:
        logger.info(f"Pingowanie serwera: {server_name}")
        
        # Próba rozwiązania nazwy serwera na adres IP
        try:
            ip_address = socket.gethostbyname(server_name)
            logger.info(f"Rozwiązano nazwę {server_name} na adres IP: {ip_address}")
            return ip_address
        except socket.gaierror:
            # Jeśli nie udało się rozwiązać nazwy, próbujemy wykonać ping
            logger.warning(f"Nie udało się rozwiązać nazwy {server_name}, próbuję ping...")
            
            # Określenie komendy ping w zależności od systemu operacyjnego
            if sys.platform.startswith('win'):
                ping_cmd = ["ping", "-n", "1", "-w", "1000", server_name]
            else:
                ping_cmd = ["ping", "-c", "1", "-W", "1", server_name]
                
            # Wykonanie komendy ping
            process = subprocess.Popen(ping_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = process.communicate()
            output_str = output.decode('utf-8', errors='ignore')
            
            # Parsowanie wyniku pingu w celu wyodrębnienia adresu IP
            # To jest uproszczona implementacja, która może wymagać dostosowania
            if process.returncode == 0:
                # Próba wyodrębnienia adresu IP z wyniku pingu
                import re
                ip_pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
                ip_matches = re.findall(ip_pattern, output_str)
                if ip_matches:
                    ip_address = ip_matches[0]
                    logger.info(f"Znaleziono adres IP z pingu: {ip_address}")
                    return ip_address
            
            logger.warning(f"Nie udało się uzyskać adresu IP dla serwera {server_name}")
            return ""
    except Exception as e:
        logger.error(f"Błąd podczas pingowania serwera {server_name}: {str(e)}")
        return ""

# Funkcja do pobierania danych z HP OneView
def get_oneview_server_count(logger: logging.Logger) -> int:
    """
    Pobiera liczbę serwerów z HP OneView.
    
    Args:
        logger: Obiekt loggera
        
    Returns:
        Liczba serwerów lub 125 (domyślna wartość) w przypadku błędu
    """
    try:
        # URL do uwierzytelniania HP OneView
        oneview_url = "https://oneview.example.com"  # Zamień na właściwy URL
        auth_url = f"{oneview_url}/rest/login-sessions"
        server_hardware_url = f"{oneview_url}/rest/server-hardware"
        
        logger.info("Łączenie z HP OneView...")
        
        # Dane uwierzytelniające - zastąp właściwymi danymi
        auth_data = {
            "userName": "admin",
            "password": "password"
        }
        
        # Nagłówki dla żądania
        headers = {
            "Content-Type": "application/json",
            "X-API-Version": "800"  # Zaktualizuj do właściwej wersji API
        }
        
        # Wykonanie żądania uwierzytelniającego
        auth_response = requests.post(auth_url, headers=headers, json=auth_data, verify=False)
        
        if auth_response.status_code != 200:
            logger.error(f"Błąd uwierzytelniania HP OneView: {auth_response.status_code}")
            return 125  # Domyślna wartość w przypadku błędu
            
        # Pobranie SessionID
        session_id = auth_response.json().get("sessionID")
        
        if not session_id:
            logger.error("Nie udało się pobrać SessionID z HP OneView")
            return 125
            
        logger.info("Uwierzytelnienie w HP OneView powiodło się")
        
        # Aktualizacja nagłówków o token sesji
        headers["Auth"] = session_id
        
        # Wykonanie żądania do /rest/server-hardware
        servers_response = requests.get(server_hardware_url, headers=headers, verify=False)
        
        if servers_response.status_code != 200:
            logger.error(f"Błąd pobierania danych o serwerach: {servers_response.status_code}")
            return 125
            
        # Pobranie całkowitej liczby serwerów
        total_servers = servers_response.json().get("total", 125)
        
        logger.info(f"Pobrano informację o liczbie serwerów: {total_servers}")
        
        return total_servers
    except Exception as e:
        logger.error(f"Błąd podczas pobierania danych z HP OneView: {str(e)}")
        return 125  # Domyślna wartość w przypadku błędu

# Funkcja do bezpiecznego pobierania wartości z zagnieżdżonych słowników
def safe_get(data, *keys, default=""):
    """
    Bezpiecznie pobiera wartości z zagnieżdżonych słowników.
    Zwraca domyślną wartość, jeśli jakikolwiek element ścieżki jest None.
    
    Args:
        data: Słownik danych
        *keys: Klucze do zagnieżdżonego dostępu
        default: Wartość domyślna zwracana w przypadku błędu
        
    Returns:
        Wartość z zagnieżdżonego słownika lub wartość domyślna
    """
    current = data
    for key in keys:
        if current is None or not isinstance(current, dict):
            return default
        current = current.get(key)
    return current if current is not None else default
def execute_graphql_query(url: str, query: str, variables: Dict[str, Any], logger: logging.Logger) -> Optional[Dict[str, Any]]:
    """
    Wykonuje zapytanie GraphQL i zwraca wynik.
    
    Args:
        url: URL endpointu GraphQL
        query: Treść zapytania GraphQL
        variables: Zmienne dla zapytania
        logger: Obiekt loggera
        
    Returns:
        Słownik z odpowiedzią lub None w przypadku błędu
    """
    headers = {
        "Content-Type": "application/json",
        # Dodaj tutaj dodatkowe nagłówki, jeśli są wymagane (np. autoryzacja)
        # "Authorization": "Bearer YOUR_TOKEN"
    }
    
    payload = {
        "query": query,
        "variables": variables
    }
    
    try:
        logger.info(f"Wykonywanie zapytania GraphQL z zmiennymi: {variables}")
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        
        if "errors" in data:
            logger.error(f"Błąd GraphQL: {data['errors']}")
            return None
            
        return data
        
    except RequestException as e:
        logger.error(f"Błąd podczas wykonywania zapytania: {str(e)}")
        return None
    except ValueError as e:
        logger.error(f"Błąd podczas parsowania odpowiedzi JSON: {str(e)}")
        return None

# Funkcja do przetwarzania danych i zapisywania do CSV
def process_and_save_to_csv(data: Dict[str, Any], logger: logging.Logger) -> bool:
    """
    Przetwarza dane z odpowiedzi GraphQL i zapisuje do pliku CSV.
    
    Args:
        data: Słownik z danymi odpowiedzi
        logger: Obiekt loggera
        
    Returns:
        True jeśli operacja się powiodła, False w przeciwnym wypadku
    """
    try:
        # Sprawdzenie, czy dane zawierają oczekiwaną strukturę
        if not data or "data" not in data:
            logger.error("Brak danych do przetworzenia")
            return False
            
        # Dostosuj tę ścieżkę do struktury Twoich danych GraphQL
        server_data = data.get("data", {}).get("applicationXGenericHardwar", [])
        
        if not server_data:
            logger.warning("Brak rekordów do zapisania")
            return False
            
        # Przygotowanie katalogu wyjściowego
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_dir = f"output/{timestamp}/Inventory"
        os.makedirs(output_dir, exist_ok=True)
        
        # Nazwa pliku CSV
        current_date = datetime.now().strftime("%Y%m%d")
        output_file = f"{output_dir}/Inventory_{current_date}.csv"
        
        # Nagłówki CSV
        fieldnames = ["Id", "ServerName", "Serial", "AppId", "AppName", "TimestampEpoch", "IP", "ServerCount"]
        
        # Przygotowanie danych do zapisania
        csv_data = []
        
        logger.info(f"Przetwarzanie {len(server_data)} rekordów")
        
        for server in server_data:
            try:
                # Bezpieczne pobieranie danych z wykorzystaniem funkcji safe_get
                server_row = {
                    "Id": safe_get(server, "HardwareInfo", "Idresource"),
                    "ServerName": safe_get(server, "HardwareInfo", "serverName"),
                    "Serial": safe_get(server, "HardwareInfo", "serial"),
                    "AppId": safe_get(server, "applicationId"),
                    "AppName": f"App-{safe_get(server, 'applicationId')}",
                    "TimestampEpoch": int(time.time())
                }
                    csv_data.append(server_row)
            except Exception as e:
                logger.warning(f"Błąd podczas przetwarzania rekordu: {str(e)}. Kontynuowanie z kolejnymi rekordami.")
                continue
            csv_data.append(server_row)
        
        # Pobierz liczbę serwerów z HP OneView (jedna wartość dla wszystkich rekordów)
        server_count = get_oneview_server_count(logger)
        logger.info(f"Liczba serwerów z HP OneView: {server_count}")
        
        # Wykonaj ping dla każdego serwera i dodaj IP do rekordów
        for server_row in csv_data:
            server_name = server_row.get("ServerName")
            if server_name:
                server_row["IP"] = get_server_ip(server_name, logger)
            # Dodaj liczbę serwerów z OneView do każdego rekordu
            server_row["ServerCount"] = server_count
        # Zapisanie do CSV
        with open(output_file, 'w', newline='', encoding='utf-8') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(csv_data)
            
        logger.info(f"Zapisano {len(csv_data)} rekordów do pliku {output_file}")
        return True

def main():
    """Główna funkcja programu."""
    logger = setup_logger()
    logger.info("Rozpoczęcie wykonywania skryptu")
    
    # URL endpointu GraphQL - zamień na właściwy adres
    graphql_url = "https://example.com/graphql"
    
    # Zapytanie GraphQL
    query = """
    query GetGenericHardware($page: Int!, $size: Int!, $applicationId: String!) {
      applicationXGenericHardwar(page: $page, size: $size, filter: { 
        applicationId: { equals: $applicationId }
      }) {
        applicationId
        driftId
        HardwareInfo {
          Idresource
          serverName
          serial
        }
      }
    }
    """
    
    # Zmienne dla zapytania - podstawowe wartości
    base_variables = {
        "size": 100,
        "applicationId": "175442"
    }
    
    try:
        # Lista na wszystkie pobrane dane
        all_results = []
        
        # Wykonanie zapytania dla stron od 1 do 4
        for page_num in range(1, 5):
            logger.info(f"Pobieranie danych dla strony {page_num}")
            
            # Aktualizacja numeru strony w zmiennych
            variables = {**base_variables, "page": page_num}
            
            # Wykonanie zapytania dla bieżącej strony
            result = execute_graphql_query(graphql_url, query, variables, logger)
            
            if not result:
                logger.error(f"Nie udało się wykonać zapytania GraphQL dla strony {page_num}")
                continue
            
            # Wyodrębnienie danych z odpowiedzi
            server_data = safe_get(result, "data", "applicationXGenericHardwar", default=[])
            
            if not server_data:
                logger.warning(f"Brak rekordów na stronie {page_num}")
                continue
                
            logger.info(f"Pobrano {len(server_data)} rekordów ze strony {page_num}")
            all_results.extend(server_data)
        
        # Sprawdzenie, czy udało się pobrać jakiekolwiek dane
        if not all_results:
            logger.error("Nie udało się pobrać żadnych danych ze wszystkich stron")
            sys.exit(1)
            
        logger.info(f"Łącznie pobrano {len(all_results)} rekordów ze wszystkich stron")
        
        # Przygotowanie danych w formacie odpowiednim dla process_and_save_to_csv
        combined_data = {"data": {"applicationXGenericHardwar": all_results}}
        
        # Przetworzenie i zapis do CSV
        if not process_and_save_to_csv(combined_data, logger):
            logger.error("Nie udało się zapisać danych do pliku CSV")
            sys.exit(1)
            
        logger.info("Skrypt zakończył działanie pomyślnie")
        
    except Exception as e:
        logger.critical(f"Wystąpił nieoczekiwany błąd: {str(e)}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()
