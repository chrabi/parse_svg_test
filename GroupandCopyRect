from dataclasses import dataclass, field
from typing import List, Optional
from statistics import mean
import uuid

@dataclass
class LineSVG:
    x1: float
    y1: float
    x2: float
    y2: float

@dataclass
class Prostokat:
    x: float
    y: float
    width: float
    height: float
    stroke_color: str = "#000000"
    stroke_width: float = 1.0
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    lines: List[LineSVG] = field(default_factory=list)
    
    def jest_kompletny(self) -> bool:
        """
        Sprawdza czy prostokąt ma wszystkie 4 linie
        """
        return len(self.lines) == 4
    
    def kopiuj_linie_z(self, inny: 'Prostokat') -> None:
        """
        Kopiuje linie z innego prostokąta, dostosowując je do aktualnej pozycji i wymiarów
        """
        # Oblicz współczynniki skalowania
        scale_x = self.width / inny.width
        scale_y = self.height / inny.height
        
        # Wyczyść obecne linie
        self.lines.clear()
        
        # Skopiuj i przeskaluj każdą linię
        for linia in inny.lines:
            # Przeskaluj względne pozycje
            rel_x1 = (linia.x1 - inny.x) * scale_x
            rel_y1 = (linia.y1 - inny.y) * scale_y
            rel_x2 = (linia.x2 - inny.x) * scale_x
            rel_y2 = (linia.y2 - inny.y) * scale_y
            
            # Dodaj nową linię z uwzględnieniem pozycji tego prostokąta
            nowa_linia = LineSVG(
                x1=self.x + rel_x1,
                y1=self.y + rel_y1,
                x2=self.x + rel_x2,
                y2=self.y + rel_y2
            )
            self.lines.append(nowa_linia)

    def jest_w_tej_samej_grupie(self, inny: 'Prostokat') -> bool:
        """
        Sprawdza czy dwa prostokąty są w tej samej grupie wysokości (±0.3)
        """
        roznica = abs(self.height - inny.height)
        return roznica <= 0.3

    @staticmethod
    def znajdz_kompletny_prostokat(grupa: List['Prostokat']) -> Optional['Prostokat']:
        """
        Znajduje pierwszy kompletny prostokąt w grupie
        """
        for p in grupa:
            if p.jest_kompletny():
                return p
        return None

    @staticmethod
    def usrednij_wymiary_grupy(grupa: List['Prostokat']) -> tuple[float, float]:
        """
        Oblicza średnią wysokość i szerokość dla grupy prostokątów
        """
        srednia_wysokosc = mean(p.height for p in grupa)
        srednia_szerokosc = mean(p.width for p in grupa)
        return srednia_szerokosc, srednia_wysokosc

    @staticmethod
    def aktualizuj_wymiary_grupy(grupa: List['Prostokat'], 
                                nowa_szerokosc: float, 
                                nowa_wysokosc: float) -> None:
        """
        Aktualizuje wymiary wszystkich prostokątów w grupie i uzupełnia brakujące linie
        """
        # Znajdź kompletny prostokąt w grupie
        wzorcowy_prostokat = Prostokat.znajdz_kompletny_prostokat(grupa)
        
        for prostokat in grupa:
            # Aktualizuj wymiary
            prostokat.width = nowa_szerokosc
            prostokat.height = nowa_wysokosc
            
            # Jeśli prostokąt nie jest kompletny i mamy wzorcowy prostokąt
            if not prostokat.jest_kompletny() and wzorcowy_prostokat:
                prostokat.kopiuj_linie_z(wzorcowy_prostokat)

    @staticmethod
    def grupuj_i_usrednij_prostokaty(prostokaty: List['Prostokat']) -> List[List['Prostokat']]:
        """
        Grupuje prostokąty, uśrednia ich wymiary i uzupełnia brakujące linie
        """
        if not prostokaty:
            return []
            
        grupy = []
        wykorzystane = set()
        
        for i, p1 in enumerate(prostokaty):
            if i in wykorzystane:
                continue
                
            aktualna_grupa = [p1]
            wykorzystane.add(i)
            
            for j, p2 in enumerate(prostokaty):
                if j not in wykorzystane and p1.jest_w_tej_samej_grupie(p2):
                    aktualna_grupa.append(p2)
                    wykorzystane.add(j)
            
            # Oblicz średnie wymiary dla grupy
            nowa_szerokosc, nowa_wysokosc = Prostokat.usrednij_wymiary_grupy(aktualna_grupa)
            
            # Zaktualizuj wymiary i uzupełnij brakujące linie
            Prostokat.aktualizuj_wymiary_grupy(aktualna_grupa, nowa_szerokosc, nowa_wysokosc)
            
            grupy.append(aktualna_grupa)
            
        return grupy
