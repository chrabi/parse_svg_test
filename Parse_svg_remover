import os
import re
from xml.etree import ElementTree as ET

def extract_x_y_from_transform(transform_value):
    match = re.search(r'matrix\(([^)]+)\)', transform_value)
    if match:
        values = match.group(1).split()
        if len(values) == 6:
            return float(values[4]), float(values[5])
    return None, None

def find_parent(root, element):
    for parent in root.iter():
        for child in parent:
            if child == element:
                return parent
    return None

def parse_path_d(d_value):
    coordinates = re.findall(r'[-+]?\d*\.\d+|\d+', d_value)
    return [float(coord) for coord in coordinates]

def generate_location_id(col, row):
    return f"{col}.{row:03d}"

def clean_and_update_svg(file_path):
    ET.register_namespace("", "http://www.w3.org/2000/svg")
    tree = ET.parse(file_path)
    root = tree.getroot()

    text_elements = root.findall(".//*{http://www.w3.org/2000/svg}text")
    path_elements = root.findall(".//*{http://www.w3.org/2000/svg}path")

    corner_elements = {'001': None, '131': None, '03U': None, '02A': None}
    for element in text_elements:
        if element.text in corner_elements:
            corner_elements[element.text] = element

    if not all(corner_elements.values()):
        print("Nie znaleziono wszystkich elementów narożnych.")
        return

    # Ekstrahuj współrzędne narożników
    corners = {}
    for key, element in corner_elements.items():
        x, y = extract_x_y_from_transform(element.get('transform'))
        corners[key] = (x, y)

    # Znajdź linie poziome i pionowe
    horizontal_lines = []
    vertical_lines = []
    for path in path_elements:
        if path.get('stroke') == '#B9B9B9':
            d = path.get('d')
            coords = parse_path_d(d)
            if len(coords) == 4:
                if coords[0] == coords[2]:  # Linia pionowa
                    vertical_lines.append(coords[0])
                elif coords[1] == coords[3]:  # Linia pozioma
                    horizontal_lines.append(coords[1])

    vertical_lines.sort()
    horizontal_lines.sort()

    # Oblicz odstępy
    vertical_step = (corners['03U'][0] - corners['02A'][0]) / 20  # 20 kolumn od 03U do 02A
    horizontal_step = (corners['131'][1] - corners['001'][1]) / 130  # 130 wierszy od 001 do 131

    # Utwórz grupę dla nowej siatki
    grid_group = ET.SubElement(root, 'g', {'id': 'location_grid'})

    # Generuj siatkę
    columns = ['03U', '03T', '03S', '03R', '03Q', '03P', '03O', '03N', '03M', '03L', '03K', '03J', '03I', '03H', '03G', '03F', '03E', '03D', '03C', '03B', '03A', '02A']
    for col_index, col in enumerate(columns):
        for row in range(1, 132):
            x = corners['03U'][0] - col_index * vertical_step
            y = corners['001'][1] + (row - 1) * horizontal_step
            location_id = generate_location_id(col, row)

            # Tworzenie prostokąta (zamiast kwadratu)
            rect_path = f"M {x} {y} h {vertical_step} v {horizontal_step} h -{vertical_step} Z"
            ET.SubElement(grid_group, 'path', {
                'd': rect_path,
                'id': location_id,
                'fill': 'none',
                'stroke': '#FF0000',  # Zmieniono kolor na czerwony
                'stroke-width': '0.5'
            })

    tree.write(file_path, encoding='utf-8', xml_declaration=True)

def main():
    svg_directory = '.'

    for filename in os.listdir(svg_directory):
        if filename.endswith('.svg'):
            file_path = os.path.join(svg_directory, filename)
            clean_and_update_svg(file_path)
            print(f"Zaktualizowano i wyczyszczono plik: {filename}")

if __name__ == "__main__":
    main()
